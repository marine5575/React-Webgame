[1-1]
리액트 => 프레임워크
사용법
React.createClass -> Class -> Hooks

ㅇ리액트란 무엇인가? 왜 쓰는가?
1. SPA (Single Page Application) : 깜빡이는거 없이 자연스럽게 넘어가는거
-> 사용자 경험을 더 좋게 하기 위해, 앱 같은 경험을 웹에서도 할 수 있도록!
2. 데이터 처리를 좀 더 쉽게 하기 위해. 데이터를 화면과 자동으로 일치시키기
3. 퍼블리싱할 때 보면 같은 component가 들어가는 경우가 많음 (중복) 피하기
=> 1. 사용자 경험 2. 재사용 컴포넌트 3. 데이터-화면 일치

[1-2]
web-pack: 쪼개진 JS 파일을 사용할 수 있는 JS로 만들어주는거
#root에 리액트를 넣을 거에요

[1-3]
HTML 속성을 넣는 자리입니다 (객체 형식으로 표현)
HTML 속성을 JS로 표현할 때는 Camel 형식으로(on_click -> onClick)
상태(state) = 바뀔 여지가 있는 부분
react 확장 프로그램을 꼭 설치하세요
상태가 바뀌면 화면이 저절로 바뀝니다

[1-4]
JS에서 html 태그 사용하기 위해 Babel 적용!
JSX : JS + xml
component 장점: 원하는 만큼 계속 쓸 수 있음(재사용성)

[1-8]
babel에서는 <></> 지원 x -> babel2에서 지원
일반 babel에서 하려고 하면 <React.Fragment></React.Fragment> 로 쓰기
form이 들어가면 onsubmit 사용
함수 따로 뺐을 때는 무조건 화살표 함수 (<- this의 차이)
네트워크 탭에서 파일에 대한 정보 알 수 있음
constructor 굳이 쓸 필요 없음 (실무에선 거의 안 씀)

[1-9]
setState는 비동기로 동작함
setState 안에 this.state가 들어가면 객체 대신 함수 사용하기!

[1-10]
우리는 데이터만 조작하고 나머지는 웬만하면 react가 할 수 있도록!
DOM에 직접 접근하고 싶으면 ref 사용
setState를 할 때마다 render 함수 실행 => 성능 최적화할 때 중요!
따로 메서드를 빼는 이유 => render할 때 마다 함수가 계속 생성되면 메모리 낭비
