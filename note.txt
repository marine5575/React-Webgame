[8-1 Context API 소개와 지뢰찾기]
useState는 동기적으로 바뀌지만 dispatch는 비동기적으로 바뀜
불필요한 렌더링을 막기 위해서 useCallback 사용 => 습관적으로 쓰도록
context API를 설정하면 그 아래에 있는 어떤 곳에서도 다 사용 가능해짐

[8-2 createContext와 Provider]
context API 사용 => createContext
data에 접근하고 싶은 comp들을 context.Provider로 묶어야 함
context로 넘겨준 값을 사용하고 싶으면 useContext 사용
context API가 성능 최적화하기 힘듦 <-context를 사용하는 자식들도 매번 리렌더링됨(매번 새로운 객체 생김)
=> useMemo를 사용한 cache 처리 해줘야 성능 저하 일어나지 않음
dispatch는 항상 바뀌지 않음

[8-4 왼쪽 오른쪽 클릭 로직 작성하기]
action을 추상적으로 만들고 reducer로 구체화는 나중에 하는게 좋음
코드가 길어진다 싶으면 구조분해 한 번 해주기!
논리적으로만 데이터를 맞춰주면 알아서 리액트가 화면을 그려줌 => 편함 :))

[8-6 빈 칸들 한 번에 열기]
maximum call stack size exceeded => 재귀 잘못했다가 콜스택 터져버릴지도...
어떤 칸이 불변성 어길지 모르기 때문에 모든 칸들을 새로 만들어줌
옆 칸들을 살펴보지 않는 이유 => JS에서는 undefined로 저장되기 때문에 filter로 걸러짐
한 번 검사한 칸은 다시 검사하지 않도록 캐싱 필요

배열보다는 객체로 해야 속성에 이름을 붙일 수 있어 good
